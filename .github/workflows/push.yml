name: Run Gradle Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-sim:
    name: Unit Sim Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run Gradle tests in unitSim
        run: ./gradlew :unitSim:test
      - name: Add coverage to PR
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: |
            ${{ github.workspace }}/unitSim/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          pass-emoji: ':sparkles:'
          fail-emoji: ':fire:'
          min-coverage-overall: 80
          min-coverage-changed-files: 80


  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: unit-sim
    if: always()
    steps:
      - name: Send formatted notification to Discord
        env:
          JOB_STATUS: ${{ needs.unit-sim.result }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID_LINK: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          TIMESTAMP: ${{ steps.your-timestamp.outputs.time }} # Make sure to generate a timestamp in an earlier step
          # Choose color based on job status
          COLOR_CODE_BASED_ON_STATUS: ${{ needs.unit-sim.result == 'success' && '3066993' || '15158332' }} # Green for success, red for failure
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          CHANGES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "content": "whats up",
              "embeds": [
                {
                  "title": "Changes detected in $BRANCH_NAME",
                  "description": "Workflow `'"$GITHUB_WORKFLOW"'` on `'"$GITHUB_REPOSITORY"'`",
                  "fields": [
                    {
                      "name": "Commit",
                      "value": "'"${COMMIT_MESSAGE}"'",
                      "inline": false
                    },
                    {
                      "name": "Author",
                      "value": "'"${COMMIT_AUTHOR}"'",
                      "inline": true
                    },
                    {
                        "name": "Status",
                        "value": "`'"$JOB_STATUS"'`",
                        "inline": false
                    },
                    {
                      "name": "Event",
                      "value": "`'"$GITHUB_EVENT_NAME"'`",
                      "inline": true
                    },
                    {
                      "name": "Files Changed",
                      "value": "'"${CHANGES}"'",
                      "inline": false
                    }
                  ],
                  "color": '"${{ needs.previous-job.outputs.color_code_based_on_status }}"',
                  "footer": {
                    "text": "GitHub Actions",
                    "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  },
                  "timestamp": "'"$TIMESTAMP"'"
                }
              ]
            }' \
          ${{ secrets.VIOLABS_DISCORD_PUBLIC_WEBHOOK }}
#          curl -X POST \
#          -H "Content-Type: application/json" \
#          -d '{
#            "embeds": [
#              {
#                "title": "GitHub Actions Workflow Status",
#                "description": "Workflow `'"$GITHUB_WORKFLOW"'` on `'"$GITHUB_REPOSITORY"'`",
#                "url": "'"$GITHUB_RUN_ID_LINK"'",
#                "color": '"$COLOR_CODE_BASED_ON_STATUS"',
#                "fields": [
#                  {
#                    "name": "Branch",
#                    "value": "`'"$GITHUB_REF"'`",
#                    "inline": true
#                  },
#                  {
#                    "name": "Commit",
#                    "value": "`'"$GITHUB_SHA"'`",
#                    "inline": true
#                  },
#                  {
#                    "name": "Event",
#                    "value": "`'"$GITHUB_EVENT_NAME"'`",
#                    "inline": true
#                  },
#                  {
#                    "name": "Status",
#                    "value": "`'"$JOB_STATUS"'`",
#                    "inline": false
#                  }
#                ],
#                "footer": {
#                  "text": "GitHub Actions",
#                  "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
#                },
#                "timestamp": "'"$TIMESTAMP"'"
#              }
#            ]
#          }' \
#          ${{ secrets.VIOLABS_DISCORD_PUBLIC_WEBHOOK }}
      
